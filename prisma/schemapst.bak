generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Banner {
  id      Int     @id @default(autoincrement())
  mapId   Int  
  img     String
  title   String
  website String
  created    DateTime @db.Date @default(now())

  map  Map @relation(fields: [mapId], references: [id], onDelete:Cascade)
}




model Skyad {
  id      Int     @id @default(autoincrement())
  owner   String
  title   String
  website String
  img     String
  created    DateTime @db.Date @default(now())

}



model Map {
  id         Int     @id @default(autoincrement())
  title      String?
  desc       String?
  img        String?
  tags       String[]
  likesCount Int  @default(0)
  likes      LikeMap[]
  banners     Banner[]
  ownerId    Int 
  ownerName   String
  fromDraft  String?
  userLimit  Int
  isPrivate  Boolean @default(false)
  floormap   String?
  interior   String?
  created    DateTime @db.Date @default(now())

  owner      User  @relation(fields: [ownerId,ownerName], references: [id,name], onDelete: Cascade)
}

model LikeMap {
  id     Int     @id @default(autoincrement())
  mapId Int 
  userId Int  
  // Timestamp field if needed
  createdAt DateTime @default(now())
  // Add other like-related fields if needed

  // Define foreign keys and relationships
  map   Map   @relation(fields: [mapId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([mapId, userId])
}

model Draft {
  id     Int     @id @default(autoincrement())
  created    DateTime @db.Date @default(now())
  ownerId     String   
  title      String?
  floormap   String?
  interior   String?
  isPublished  Boolean @default(false)
}



model File {
  id            Int     @id @default(autoincrement())
  filename      String
  userId        Int   
  address       String
  image         String
  size        Int
  created    DateTime? @db.Date @default(now())
  
  user          User     @relation(fields: [userId], references: [id])
}

model UserFollower {
  id            Int     @id @default(autoincrement())
  user_id     Int 
  user        User     @relation("followers", fields: [user_id], references: [id])
  follower_id Int 
  follower    User     @relation("followings", fields: [follower_id], references: [id])
  created_at  DateTime @default(now())

  @@unique([user_id, follower_id])
}

model PostLike {
  id            Int     @id @default(autoincrement())
  user_id    Int 
  user       User     @relation(fields: [user_id], references: [id])
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id])
  created_at DateTime @default(now())

  @@unique([user_id, post_id])
}

model Post {
  id        Int     @id @default(autoincrement())
  caption    String
  user_id    Int     
  user       User       @relation(fields: [user_id], references: [id])
  liked_bys  PostLike[]
  created_at DateTime   @default(now())
}

model Story {
  id         Int     @id @default(autoincrement())
  caption    String
  user_id    Int  
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
}

model Account {
  id              Int     @id @default(autoincrement())
  userId             Int  
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id             Int     @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int 
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           Int     @id @default(autoincrement())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  provider      String?
  image         String?
  stripeCustomerId  String? @unique
  isActive      Boolean?  
  bDay          DateTime? 
  gender        String? 
  likedMaps     LikeMap[]
  skyEnabled    Boolean? 
  bannerEnabled Boolean?  
  subscriptionID   String? @unique
  subscriptionName  String? 
  subscriptionEnd   Int? 
  rpmId         String?  @unique 
  ownedMaps     Map[]
  friends       String[]
  followers   UserFollower[] @relation("followers")
  followings  UserFollower[] @relation("followings")
  posts_liked PostLike[]
  posts       Post[]
  stories     Story[]
  avatarUrl     String?  
  accounts      Account[]
  sessions      Session[]
  files        File[] 
  storageQuota   Int  @default(209715200)
  usedQuota    Int  @default(0)

  @@unique([id, name])
}

model VerificationToken {
  id         Int     @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}