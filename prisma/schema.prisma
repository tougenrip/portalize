generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Banner {
  id           String     @id @default(cuid())
  mapId   String  
  img     String
  title   String
  website String
  created    DateTime @db.Date @default(now())

  map  Map @relation(fields: [mapId], references: [id], onDelete:Cascade)
}
model Skyad {
  id           String     @id @default(cuid())
  owner   String
  title   String
  website String
  img     String
  created    DateTime @db.Date @default(now())

}



model Map {
 id           String     @id @default(cuid())
  title      String?
  desc       String?
  img        String?
  tags       String[]
  likesCount Int  @default(0)
  banners     Banner[]
  ownerId    String 
  ownerName   String
  fromDraft  String?
  userLimit  Int
  isPrivate  Boolean @default(false)
  floormap   String?
  interior   String?
  created    DateTime @db.Date @default(now())

  owner      User  @relation(fields: [ownerId,ownerName], references: [id,name], onDelete: Cascade)
}


model Draft {
  id           String     @id @default(cuid())
  created    DateTime @db.Date @default(now())
  ownerId     String   
  title      String?
  floormap   String?
  interior   String?
  isPublished  Boolean @default(false)
}
model File {
  id           String     @id @default(cuid())
  filename      String
  userId        String   
  address       String
  image         String
  size        Int
  created    DateTime? @db.Date @default(now())
  
  user          User     @relation(fields: [userId], references: [id])
}
model Account {
  id           String     @id @default(cuid())
  userId             String  
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String     @id @default(cuid())
  sessionToken String   @unique
  userId       String 
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String     @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?


  bDay          DateTime? 
  gender        String? 

  stripeCustomerId  String? @unique
  isActive      Boolean?  
  subscriptionID   String? @unique
  subscriptionName  String? 
  subscriptionEnd   Int? 
  skyEnabled    Boolean? 
  bannerEnabled Boolean?  
  
  rpmId         String?  @unique 
  avatarUrl     String?  

  ownedMaps     Map[]
  
  accounts      Account[]
  sessions      Session[]
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
  createdSubreddits Subreddit[]    @relation("CreatedBy")
  subscriptions     Subscription[]
  votes             Vote[]
  friends       String[]

  files        File[] 
  storageQuota   Int  @default(209715200)
  usedQuota    Int  @default(0)

  @@unique([id, name])
}

enum VoteType {
  UP
  DOWN
}

model Subreddit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String?
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  @@id([userId, subredditId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  comments    Comment[] 
  votes       Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}


model VerificationToken {
  id         Int     @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}