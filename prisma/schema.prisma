generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}
model banners {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  owner   String
  img     String
  title   String
  website String
}



model skyads {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  owner   String
  img     String
  title   String
  website String
}

model events {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  owner   String
  img     String
  title   String
  website String
}

model maps {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created    DateTime @db.Date
  desc       String
  floormap   String
  img        String
  interior   String
  likes      Int?
  owner      String?
  ownerEmail String?
  title      String
  userLimit  String
}

// model users {
//   id               String    @id @default(auto()) @map("_id") @db.ObjectId
//   name             String    @unique(map: "name_1")
//   email            String    @unique(map: "email_1")
//   hashedPassword   String
//   image            String?
//   rpmId            String?
//   avatarUrl        String?
//   stripeCustomerId String
//   active           Boolean  @default(false)
//   bannerEnabled    Boolean?
//   skyEnabled       Boolean?
//   isActive         Boolean
//   created          DateTime?  @db.Date @default(now())
// }

// model session {
//   id              String    @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken    String
//   userId          String
//   expires   DateTime
// }



model Account {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String  @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  image         String?
  stripeCustomerId  String?
  isActive      Boolean?
  skyEnabled    Boolean?
  bannerEnabled Boolean?
  rpmId         String?
  avatarUrl     String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}