generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Banner {
  id           String     @id @default(cuid())
  mapId   String  
  img     String
  title   String
  website String
  created    DateTime @db.Date @default(now())

  map  Map @relation(fields: [mapId], references: [id], onDelete:Cascade)
}


model Skyad {
  id           String     @id @default(cuid())
  owner   String
  title   String
  website String
  img     String
  created    DateTime @db.Date @default(now())

}



model Map {
 id           String     @id @default(cuid())
  title      String?
  desc       String?
  img        String?
  tags       String[]
  likesCount Int  @default(0)
  banners     Banner[]
  ownerId    String 
  ownerName   String
  fromDraft  String?
  userLimit  Int
  isPrivate  Boolean @default(false)
  floormap   String?
  interior   String?
  created    DateTime @db.Date @default(now())

  owner      User  @relation(fields: [ownerId,ownerName], references: [id,name], onDelete: Cascade)
}


model Draft {
  id           String     @id @default(cuid())
  created    DateTime @db.Date @default(now())
  ownerId     String   
  title      String?
  floormap   String?
  interior   String?
  isPublished  Boolean @default(false)
}
model File {
  id           String     @id @default(cuid())
  filename      String
  userId        String   
  address       String
  image         String
  size        Int
  created    DateTime? @db.Date @default(now())
  
  user          User     @relation(fields: [userId], references: [id])
}


model Account {
  id           String     @id @default(cuid())
  userId             String  
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String     @id @default(cuid())
  sessionToken String   @unique
  userId       String 
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}


model User {
  id           String     @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  role          Role      @default(USER)
  private       Boolean   @default(false)
  image         String?
  website       String?
  bio           String?   @db.Text
  gender        Gender?

  posts          Post[]
  likedPosts     Likes[]
  commentedPosts Comments[]
  followers      Follows[]      @relation("following")
  following      Follows[]      @relation("follower")
  commentLikes   CommentLikes[]
  stories        Stories[]
  storyViews     StoryViews[]


  bDay          DateTime? 

  stripeCustomerId  String? @unique
  isActive      Boolean?  
  subscriptionID   String? @unique
  subscriptionName  String? 
  subscriptionEnd   Int? 
  skyEnabled    Boolean? 
  bannerEnabled Boolean?  
  
  rpmId         String?  @unique 
  avatarUrl     String?  

  ownedMaps     Map[]
  
  accounts      Account[]
  sessions      Session[]
  friends       String[]

  files        File[] 
  storageQuota   Int  @default(209715200)
  usedQuota    Int  @default(0)

  @@unique([id, name])
}


model Post {
  id        String   @id @default(cuid())
  caption   String
  location  String?
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String?

  likedByUsers     Likes[]
  commentedByUsers Comments[]
}

model Stories {
  id         String       @id @default(cuid())
  authorId   String
  media_url  String
  postedAt   DateTime     @default(now())
  expiresAt  DateTime     @default(dbgenerated("NOW() + interval '1 DAYS'"))
  caption    String?
  storyViews StoryViews[]

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model StoryViews {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  stories   Stories @relation(fields: [storiesId], references: [id])
  storiesId String

  @@id([userId, storiesId])
}

model Image {
  id         String   @id @default(cuid())
  name       String   @unique
  path       String
  uploadedAt DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
}

model Likes {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model CommentLikes {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comments @relation(fields: [commentId], references: [id])
  commentId String

  @@unique([userId, commentId])
}

model Comments {
  id            String         @id @default(cuid())
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  content       String
  postedAt      DateTime       @default(now())
  lastUpdatedAt DateTime       @updatedAt
  commentLikes  CommentLikes[]
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
}

model VerificationToken {
  id         Int     @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}